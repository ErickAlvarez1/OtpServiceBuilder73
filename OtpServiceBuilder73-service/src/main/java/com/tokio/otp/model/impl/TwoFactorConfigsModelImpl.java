/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tokio.otp.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.tokio.otp.model.TwoFactorConfigs;
import com.tokio.otp.model.TwoFactorConfigsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TwoFactorConfigs service. Represents a row in the &quot;OTP_TwoFactorConfigs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TwoFactorConfigsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TwoFactorConfigsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TwoFactorConfigsImpl
 * @generated
 */
public class TwoFactorConfigsModelImpl
	extends BaseModelImpl<TwoFactorConfigs> implements TwoFactorConfigsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a two factor configs model instance should use the <code>TwoFactorConfigs</code> interface instead.
	 */
	public static final String TABLE_NAME = "OTP_TwoFactorConfigs";

	public static final Object[][] TABLE_COLUMNS = {
		{"twoFactorConfigsId", Types.BIGINT}, {"configName", Types.VARCHAR},
		{"configValue", Types.VARCHAR}, {"configStatus", Types.BOOLEAN},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("twoFactorConfigsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("configName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("configValue", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("configStatus", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OTP_TwoFactorConfigs (twoFactorConfigsId LONG not null primary key,configName VARCHAR(75) null,configValue VARCHAR(75) null,configStatus BOOLEAN,groupId LONG,companyId LONG,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table OTP_TwoFactorConfigs";

	public static final String ORDER_BY_JPQL =
		" ORDER BY twoFactorConfigs.twoFactorConfigsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OTP_TwoFactorConfigs.twoFactorConfigsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONFIGNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TWOFACTORCONFIGSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TwoFactorConfigsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _twoFactorConfigsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTwoFactorConfigsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _twoFactorConfigsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TwoFactorConfigs.class;
	}

	@Override
	public String getModelClassName() {
		return TwoFactorConfigs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TwoFactorConfigs, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TwoFactorConfigs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TwoFactorConfigs, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TwoFactorConfigs)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TwoFactorConfigs, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TwoFactorConfigs, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TwoFactorConfigs)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TwoFactorConfigs, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TwoFactorConfigs, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TwoFactorConfigs, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TwoFactorConfigs, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TwoFactorConfigs, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<TwoFactorConfigs, Object>>();
		Map<String, BiConsumer<TwoFactorConfigs, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TwoFactorConfigs, ?>>();

		attributeGetterFunctions.put(
			"twoFactorConfigsId", TwoFactorConfigs::getTwoFactorConfigsId);
		attributeSetterBiConsumers.put(
			"twoFactorConfigsId",
			(BiConsumer<TwoFactorConfigs, Long>)
				TwoFactorConfigs::setTwoFactorConfigsId);
		attributeGetterFunctions.put(
			"configName", TwoFactorConfigs::getConfigName);
		attributeSetterBiConsumers.put(
			"configName",
			(BiConsumer<TwoFactorConfigs, String>)
				TwoFactorConfigs::setConfigName);
		attributeGetterFunctions.put(
			"configValue", TwoFactorConfigs::getConfigValue);
		attributeSetterBiConsumers.put(
			"configValue",
			(BiConsumer<TwoFactorConfigs, String>)
				TwoFactorConfigs::setConfigValue);
		attributeGetterFunctions.put(
			"configStatus", TwoFactorConfigs::getConfigStatus);
		attributeSetterBiConsumers.put(
			"configStatus",
			(BiConsumer<TwoFactorConfigs, Boolean>)
				TwoFactorConfigs::setConfigStatus);
		attributeGetterFunctions.put("groupId", TwoFactorConfigs::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TwoFactorConfigs, Long>)TwoFactorConfigs::setGroupId);
		attributeGetterFunctions.put(
			"companyId", TwoFactorConfigs::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TwoFactorConfigs, Long>)TwoFactorConfigs::setCompanyId);
		attributeGetterFunctions.put(
			"modifiedDate", TwoFactorConfigs::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TwoFactorConfigs, Date>)
				TwoFactorConfigs::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTwoFactorConfigsId() {
		return _twoFactorConfigsId;
	}

	@Override
	public void setTwoFactorConfigsId(long twoFactorConfigsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_twoFactorConfigsId = twoFactorConfigsId;
	}

	@Override
	public String getConfigName() {
		if (_configName == null) {
			return "";
		}
		else {
			return _configName;
		}
	}

	@Override
	public void setConfigName(String configName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_configName = configName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalConfigName() {
		return getColumnOriginalValue("configName");
	}

	@Override
	public String getConfigValue() {
		if (_configValue == null) {
			return "";
		}
		else {
			return _configValue;
		}
	}

	@Override
	public void setConfigValue(String configValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_configValue = configValue;
	}

	@Override
	public boolean getConfigStatus() {
		return _configStatus;
	}

	@Override
	public boolean isConfigStatus() {
		return _configStatus;
	}

	@Override
	public void setConfigStatus(boolean configStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_configStatus = configStatus;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TwoFactorConfigs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TwoFactorConfigs toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TwoFactorConfigs>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TwoFactorConfigsImpl twoFactorConfigsImpl = new TwoFactorConfigsImpl();

		twoFactorConfigsImpl.setTwoFactorConfigsId(getTwoFactorConfigsId());
		twoFactorConfigsImpl.setConfigName(getConfigName());
		twoFactorConfigsImpl.setConfigValue(getConfigValue());
		twoFactorConfigsImpl.setConfigStatus(isConfigStatus());
		twoFactorConfigsImpl.setGroupId(getGroupId());
		twoFactorConfigsImpl.setCompanyId(getCompanyId());
		twoFactorConfigsImpl.setModifiedDate(getModifiedDate());

		twoFactorConfigsImpl.resetOriginalValues();

		return twoFactorConfigsImpl;
	}

	@Override
	public int compareTo(TwoFactorConfigs twoFactorConfigs) {
		long primaryKey = twoFactorConfigs.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TwoFactorConfigs)) {
			return false;
		}

		TwoFactorConfigs twoFactorConfigs = (TwoFactorConfigs)object;

		long primaryKey = twoFactorConfigs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TwoFactorConfigs> toCacheModel() {
		TwoFactorConfigsCacheModel twoFactorConfigsCacheModel =
			new TwoFactorConfigsCacheModel();

		twoFactorConfigsCacheModel.twoFactorConfigsId = getTwoFactorConfigsId();

		twoFactorConfigsCacheModel.configName = getConfigName();

		String configName = twoFactorConfigsCacheModel.configName;

		if ((configName != null) && (configName.length() == 0)) {
			twoFactorConfigsCacheModel.configName = null;
		}

		twoFactorConfigsCacheModel.configValue = getConfigValue();

		String configValue = twoFactorConfigsCacheModel.configValue;

		if ((configValue != null) && (configValue.length() == 0)) {
			twoFactorConfigsCacheModel.configValue = null;
		}

		twoFactorConfigsCacheModel.configStatus = isConfigStatus();

		twoFactorConfigsCacheModel.groupId = getGroupId();

		twoFactorConfigsCacheModel.companyId = getCompanyId();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			twoFactorConfigsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			twoFactorConfigsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return twoFactorConfigsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TwoFactorConfigs, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TwoFactorConfigs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TwoFactorConfigs, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TwoFactorConfigs)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TwoFactorConfigs, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TwoFactorConfigs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TwoFactorConfigs, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TwoFactorConfigs)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TwoFactorConfigs>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TwoFactorConfigs.class, ModelWrapper.class);

	}

	private long _twoFactorConfigsId;
	private String _configName;
	private String _configValue;
	private boolean _configStatus;
	private long _groupId;
	private long _companyId;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<TwoFactorConfigs, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TwoFactorConfigs)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("twoFactorConfigsId", _twoFactorConfigsId);
		_columnOriginalValues.put("configName", _configName);
		_columnOriginalValues.put("configValue", _configValue);
		_columnOriginalValues.put("configStatus", _configStatus);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("twoFactorConfigsId", 1L);

		columnBitmasks.put("configName", 2L);

		columnBitmasks.put("configValue", 4L);

		columnBitmasks.put("configStatus", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TwoFactorConfigs _escapedModel;

}